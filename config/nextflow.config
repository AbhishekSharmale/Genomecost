/*
 * GenomeCostTracker Nextflow Configuration
 * Optimized for Azure Batch with cost tracking integration
 */

// Global parameters
params {
    // Cost tracking parameters
    cost_tracking_enabled = true
    genomecost_api_url = 'http://localhost:8000/api/v1'
    genomecost_api_token = '' // Set via environment variable
    
    // Project metadata for cost attribution
    project_name = 'default-project'
    sample_id = 'unknown-sample'
    user_email = 'user@example.com'
    pipeline_type = 'unknown'
    
    // Azure configuration
    azure_resource_group = 'genomics-rg'
    azure_batch_pool_id = 'genomics-pool'
    azure_storage_account = 'genomicsstorage'
    
    // Workflow parameters
    input = null
    outdir = './results'
    
    // Resource optimization
    max_memory = '128.GB'
    max_cpus = 16
    max_time = '240.h'
}

// Process configuration
process {
    // Default resources
    cpus = 2
    memory = 4.GB
    time = 2.h
    
    // Azure Batch executor
    executor = 'azurebatch'
    
    // Cost tracking tags for all processes
    tag = { "${params.project_name}_${params.sample_id}_${task.process}" }
    
    // Resource labels for cost attribution
    resourceLabels = [
        'project': params.project_name,
        'sample_id': params.sample_id,
        'workflow_type': params.pipeline_type,
        'user': params.user_email,
        'pipeline': workflow.manifest.name ?: 'unknown',
        'created_by': 'GenomeCostTracker'
    ]
    
    // Process-specific configurations
    withLabel: 'low_memory' {
        cpus = 1
        memory = 2.GB
        time = 1.h
    }
    
    withLabel: 'medium_memory' {
        cpus = 4
        memory = 8.GB
        time = 4.h
    }
    
    withLabel: 'high_memory' {
        cpus = 8
        memory = 32.GB
        time = 8.h
    }
    
    withLabel: 'high_cpu' {
        cpus = 16
        memory = 16.GB
        time = 12.h
    }
    
    // Error handling
    errorStrategy = 'retry'
    maxRetries = 2
}

// Azure Batch configuration
azure {
    batch {
        location = 'East US'
        accountName = System.getenv('AZURE_BATCH_ACCOUNT')
        accountKey = System.getenv('AZURE_BATCH_KEY')
        endpoint = System.getenv('AZURE_BATCH_ENDPOINT')
        
        pools {
            auto {
                vmType = 'Standard_D4s_v3'
                vmCount = 5
                maxVmCount = 20
                autoScale = true
                
                // Use low-priority VMs for cost optimization
                lowPriority = true
                
                // Custom startup script for cost tracking
                startTask = '''
                    #!/bin/bash
                    # Install cost tracking agent
                    curl -s https://raw.githubusercontent.com/genomecost/agent/main/install.sh | bash
                    export GENOMECOST_PROJECT="${params.project_name}"
                    export GENOMECOST_SAMPLE="${params.sample_id}"
                    export GENOMECOST_USER="${params.user_email}"
                '''
            }
            
            'genomics-pool' {
                vmType = 'Standard_F8s_v2'
                vmCount = 3
                maxVmCount = 15
                autoScale = true
                lowPriority = true
            }
        }
    }
    
    storage {
        accountName = System.getenv('AZURE_STORAGE_ACCOUNT')
        accountKey = System.getenv('AZURE_STORAGE_KEY')
        
        // Optimize storage tiers for cost
        fileShares {
            'genomics-data' {
                mountPath = '/mnt/data'
                tier = 'Hot'  // Use Hot tier for active data
            }
            'genomics-results' {
                mountPath = '/mnt/results'
                tier = 'Cool'  // Use Cool tier for results
            }
        }
    }
}

// Workflow execution reporting
timeline {
    enabled = true
    file = "${params.outdir}/timeline.html"
}

report {
    enabled = true
    file = "${params.outdir}/report.html"
}

trace {
    enabled = true
    file = "${params.outdir}/trace.txt"
    fields = 'task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes,vol_ctxt,inv_ctxt'
}

dag {
    enabled = true
    file = "${params.outdir}/dag.svg"
}

// Manifest
manifest {
    name = 'GenomeCostTracker-Pipeline'
    author = 'GenomeCostTracker Team'
    homePage = 'https://github.com/genomecost/pipeline'
    description = 'Cost-optimized genomics pipeline for Azure'
    mainScript = 'main.nf'
    nextflowVersion = '>=22.10.0'
    version = '1.0.0'
}

// Profiles for different environments
profiles {
    
    // Development profile - minimal resources
    dev {
        process {
            cpus = 1
            memory = 2.GB
            time = 30.min
        }
        
        azure.batch.pools.auto.vmCount = 1
        azure.batch.pools.auto.maxVmCount = 2
    }
    
    // Production profile - optimized for cost and performance
    prod {
        process {
            cpus = 4
            memory = 8.GB
            time = 4.h
        }
        
        azure.batch.pools.auto.vmCount = 5
        azure.batch.pools.auto.maxVmCount = 50
        azure.batch.pools.auto.lowPriority = true
    }
    
    // High-memory profile for large datasets
    highmem {
        process {
            cpus = 8
            memory = 64.GB
            time = 12.h
        }
        
        azure.batch.pools.auto.vmType = 'Standard_E16s_v3'
        azure.batch.pools.auto.vmCount = 2
        azure.batch.pools.auto.maxVmCount = 10
    }
    
    // Cost-optimized profile - maximum savings
    cost_optimized {
        process {
            cpus = 2
            memory = 4.GB
            time = 8.h
            errorStrategy = 'retry'
            maxRetries = 3
        }
        
        azure.batch.pools.auto.vmType = 'Standard_B4ms'
        azure.batch.pools.auto.lowPriority = true
        azure.batch.pools.auto.vmCount = 1
        azure.batch.pools.auto.maxVmCount = 5
        
        // Use archive storage for long-term data
        azure.storage.fileShares.'genomics-results'.tier = 'Archive'
    }
}

// Cost tracking hooks
def trackJobStart() {
    if (params.cost_tracking_enabled) {
        def jobData = [
            job_id: workflow.runName,
            workflow_name: workflow.manifest.name,
            sample_id: params.sample_id,
            project_name: params.project_name,
            pipeline_type: params.pipeline_type,
            azure_resource_group: params.azure_resource_group,
            azure_batch_pool_id: params.azure_batch_pool_id,
            estimated_runtime_hours: 4.0  // Default estimate
        ]
        
        // Send job start notification to GenomeCostTracker API
        def apiUrl = "${params.genomecost_api_url}/jobs"
        def headers = ['Authorization': "Bearer ${params.genomecost_api_token}"]
        
        try {
            // This would be implemented in the actual pipeline
            log.info "Registering job with GenomeCostTracker: ${workflow.runName}"
        } catch (Exception e) {
            log.warn "Failed to register job with GenomeCostTracker: ${e.message}"
        }
    }
}

def trackJobComplete() {
    if (params.cost_tracking_enabled) {
        try {
            log.info "Notifying GenomeCostTracker of job completion: ${workflow.runName}"
            // Implementation would update job status and trigger cost reconciliation
        } catch (Exception e) {
            log.warn "Failed to notify GenomeCostTracker of completion: ${e.message}"
        }
    }
}

// Workflow event handlers
workflow.onStart {
    trackJobStart()
}

workflow.onComplete {
    trackJobComplete()
    
    log.info """
    ==============================================
    GenomeCostTracker Pipeline Execution Summary
    ==============================================
    Workflow: ${workflow.manifest.name}
    Run Name: ${workflow.runName}
    Project: ${params.project_name}
    Sample: ${params.sample_id}
    User: ${params.user_email}
    Status: ${workflow.success ? 'SUCCESS' : 'FAILED'}
    Duration: ${workflow.duration}
    Launch Dir: ${workflow.launchDir}
    Work Dir: ${workflow.workDir}
    Config Files: ${workflow.configFiles}
    Container Engine: ${workflow.containerEngine}
    ==============================================
    Cost tracking enabled: ${params.cost_tracking_enabled}
    Azure Resource Group: ${params.azure_resource_group}
    Azure Batch Pool: ${params.azure_batch_pool_id}
    ==============================================
    """
}